// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           Int       @id @default(autoincrement())
  email        String    @unique
  passwordHash String
  createdAt    DateTime  @default(now())
  profile      Profile?
  comments     Comment[]  
  recipes      Recipe[]
  savedRecipes SavedRecipe[]
}

model Profile {
  id          Int     @id @default(autoincrement())
  userId      Int     @unique
  displayName String  @default("")
  bio         String  @default("")
  avatarUrl   String  @default("")
  user        User    @relation(fields: [userId], references: [id])
}

model Comment {
  id        Int      @id @default(autoincrement())
  content   String
  createdAt DateTime @default(now())

  // the relationship to the user, which user comment belongs to 
  userId Int
  user   User @relation(fields: [userId], references: [id])
}

model Recipe {
  id          Int       @id @default(autoincrement())
  title       String
  description String?
  createdAt   DateTime  @default(now())
  userId      Int
  user        User      @relation(fields: [userId], references: [id])
  savedRecipes SavedRecipe[]
  groceryIngredients Grocery[]
  macroEntries Macro[]
}

model SavedRecipe {
  id       Int    @id @default(autoincrement())
  userId   Int
  recipeId Int

  // the relationship to the user, which user comment belongs to 
  user     User   @relation(fields: [userId], references: [id])
  recipe   Recipe @relation(fields: [recipeId], references: [id])
}

// table for groceries, ingredients are listed 
model Grocery {
  id        Int      @id @default(autoincrement())
  name      String
  quantity  Float
  unit      String

  //relation to the specific recipe 
  recipeId  Int
  recipe    Recipe   @relation(fields: [recipeId], references: [id])
}

// table for macros, contains all macro information for a recipe 
model Macro {
  id        Int      @id @default(autoincrement())
  calories  Float
  protein   Float
  carbs     Float
  fat       Float

  //relation to the specific recipe 
  recipeId  Int
  recipe    Recipe   @relation(fields: [recipeId], references: [id])
}


// npx prisma migrate dev - used this to get the local database changes 
// npx prisma studio - run this in backend folder, GUI for database 

